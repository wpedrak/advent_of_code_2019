from collections import deque
from point import Point


class Maze():

    WALL = '#'
    EMPTY = '.'
    BOT = '@'

    def __init__(self, inp):
        rows = inp.split()
        self.board = {}
        self.num_of_keys = 0
        self.bots = []

        for y in range(len(rows)):
            for x in range(len(rows[0])):
                value = rows[y][x]
                point = Point(x, y)

                if value == Maze.BOT:
                    self.bots.append(point)
                    self.board[point] = Maze.EMPTY
                    continue

                if value.islower():
                    self.num_of_keys += 1

                self.board[point] = value

    def get_neighbours(self, p):
        potential = [
            Point(p.x, p.y + 1),
            Point(p.x, p.y - 1),
            Point(p.x - 1, p.y),
            Point(p.x + 1, p.y)
        ]

        return list(filter(lambda x: self.board[x] != Maze.WALL, potential))

    def get_value(self, p):
        return self.board[p]


def add_if_key(keys_set, keys):
    additional_keys = filter(
        lambda x: x.islower(),
        keys
    )

    return keys_set | frozenset(additional_keys)


def get_values(maze, bots):
    return list(map(
        lambda x: maze.get_value(x),
        bots
    ))


def legal_door(maze, tup):
    (bots, keys_set) = tup
    values = get_values(maze, bots)

    return all(map(
        lambda x: not x.isupper() or x.lower() in keys_set,
        values
    ))


def all_moves(maze, bots):
    lbots = list(bots)
    res = []

    for idx in range(len(bots)):
        bot = bots[idx]
        for neighbour in maze.get_neighbours(bot):
            lbots[idx] = neighbour
            res.append(tuple(lbots))

        lbots[idx] = bot

    return res


def solve(inp):
    maze = Maze(inp)

    visited = set()
    to_visit = deque([(tuple(maze.bots), frozenset()), 'LVL_UP'])
    dist = 0

    while len(to_visit) > 1:
        current = to_visit.popleft()

        # print(current)

        if current == 'LVL_UP':
            dist += 1
            to_visit.append('LVL_UP')
            continue

        if current in visited:
            continue

        visited.add(current)

        (bots, keys_set) = current

        if len(keys_set) == maze.num_of_keys:
            return dist

        neighbours = all_moves(maze, bots)
        with_keys = [(n, add_if_key(keys_set, get_values(maze, n))) for n in neighbours]
        only_open_dors = [tup for tup in with_keys if legal_door(maze, tup)]

        to_visit += deque([tup for tup in only_open_dors if tup not in visited])

    raise Exception('not found')


# 8
# maze = '''
# #######
# #a.#Cd#
# ##@#@##
# #######
# ##@#@##
# #cB#.b#
# #######
# '''.strip()

# 24
# maze = '''
# ###############
# #d.ABC.#.....a#
# ######@#@######
# ###############
# ######@#@######
# #b.....#.....c#
# ###############
# '''.strip()

# 32
# maze = '''
# #############
# #DcBa.#.GhKl#
# #.###@#@#I###
# #e#d#####j#k#
# ###C#@#@###J#
# #fEbA.#.FgHi#
# #############
# '''.strip()

# 72
# maze = '''
# #############
# #g#f.D#..h#l#
# #F###e#E###.#
# #dCba@#@BcIJ#
# #############
# #nK.L@#@G...#
# #M###N#H###.#
# #o#m..#i#jk.#
# #############
# '''.strip()


maze = '''
#################################################################################
###########.........#####################.....................#...###c#.......###
###########.#######.#####################.#######.###########.#.#.###.#.#####.###
#######e..#...###...#####################..b#####.###########...#.....#.#.T..r###
#######.#.###.###.#########################.#####.#####################.#.#######
#######.#...#.###.#########################.#####.###...#######...#####.#.......#
#######.###.#.###.#########################.#####.###.#.#######.#.#####.#######.#
#######...#...#...#########################.#####.....#.###.....#.#####.###.....#
#########.#####.###########################.###########.###O#####.#####.###.#####
#########...###.....#####################...#x#########.###...#z#.....#.###.#####
###########.#######.#####################.###.#########.#####.#.#####.#.###.#####
###########.#######.#####################...#.#########.###.....###...#...#.....#
###########.#######.#######################.#.#########.###.#######.#####.#####.#
###########...#####.#######################.#...#######.###.#######.......#....q#
#############.#####.#######################.###.#######.###.###############.#####
#############.#####...#####..h#############.....#######...#.###############.#####
#############.#######.#####.#############################.#.###############.#####
#############.#######.###...#############################...#########.......#####
#############.#######.###F###########################################.###########
###########...#######...#.#############s#############################.###########
###########.###########.#.#############.#############################.###########
###d#####...###########...#############.#############################.###########
###.#####.#############################.#############################.###########
###.....#...###########################.###########################...###########
#######.###.###########################.###########################.#############
#######.###...#...#.......###.........#.#.....#####################...###########
#######.#####.#.#.#.#####.###.#######.#.#.###.#######################.###########
#####...#####.#.#...#.....#...###.....#.#.###...#################.....###########
#####.#######.#.#####.#####.#####.#####.#.#####.#################.#.#############
#####.#######.#...###.#...#.....#.###...#.....#.#################.#j#.....###.W.#
#####.#######.###.###.#.#.#####.#.###.#.#####.#.#################.###.###.###.#.#
#...#.#######.#...###.#.#.......#.....#.###...#.......###########...#.###...#.#.#
#.#.#.#######.#.#####.#.###############.###.#########.#############.#.#####.#.#.#
#.#...#...###.#w..#...#...#############.###.#####...#...#######...#...#.V.#...#.#
#.#####.#.###.###.#.#####.#############.###.#####.#.###.#######.#M#####.#.#####.#
#.....#.#...#.....#.#####.#########.....###.......#...#...#####.#.......#.......#
#####.#.###.#######.#####.#########.#################.###.#####.#################
#.....#.###.......#.#####.#########.....#...#.....###.###.#####.....#############
#.#####.#########.#.#####.#############.#.#.#.###.###.###.#########.#############
#............v###.........#############@#@#...###.....###...........#############
#################################################################################
###.....#############.......#.........#@#@......#####...#################...#####
###.###.#############.#####.#.###.###.#.#######.#####.#.#################.#.#####
###.###.....#########.#####...###.###...#######......a#.......#########...#.#####
###.#######.#########.###########.###########################.#########.###.#####
###..n....#.#########.###########.....###########...###...###...#######...#.#####
#########.#.#########.###############.###########.#.###.#.#####.#########P#.#####
#######...#...#u..#...###############.#########...#.....#.#####.....#...#.#.#####
#######.#####.#.#.#.#################.#########.#########.#########.#.#U#.#.#####
#######p..###...#...#################.#########.###...#...#####...#...#.#.#...###
#########.###########################.#########.###.#.#.#######.#.#####.#.###.###
#...###...#################..k..#...#...#######.#...#.#.#####...#...#...#...#.###
#.#.###.###################.###.#.#.###.#######.#.###C#Z#####.#####.#.#####.#.###
#.#.....###################.#...#.#...#.#######.#.#...#...###...###.#...###.#.###
#.#########################.#.###.###.#.#######.#.#.#####.#####.###.###.###.#.###
#m#####...........#######...#...#...#.#.#######.#.#.#.....#####.#...#..g#.N.#...#
#######.#########.#######.#####.###.#.#.#######.#B#.#.#########.#.###.###.#####.#
###.....#######...#######.#####.#...#...#######...#.#.......#...#...#...#.#i###.#
###.###########.#########.#####.#.#################.#######.#.#####.###.#.#.###.#
#...#.......#...#####y....#...#.#.#.....#########...#######...#####.#...#.#.###.#
#.###.#####.#.#############.#.#.#.#.###.#########.#################.#.###.#.###.#
#...#.###...#.#############.#...#...###.#########...#############...#.....#.###.#
###.#.###.###.#############.###########.###########X#############.#########.###.#
#...#.###...#.....#########...#####.....###########.###########...#######.......#
#Q###.#####.#####.###########.#####.###############.###########.#########.#######
#.....#####.#####.........#...###...###############...#########.#.......#.......#
###########.#############.#.#####.###################.#########.#D#####.#######.#
###...#####.###.....#####...###...###################..l#####...#.#####.......#.#
###.#.#####.###.###.###########.#############################.###.###########.#.#
#...#...###.....#...###########.........#####################.###...#########...#
#.#####.#########.#####################.#####################.#####.#############
#.###t#.#######...#####################.#####################.###...###...#######
#.###.#.#######.#######################.#####################.###.#####.#.#######
#...#...###...#.#######.......#######...#############.........###.......#.#######
###.#######.#.#.#######.#####.#######.###############.#####.#############.#######
###.#####...#.#...#####.#####...#####...#...###.....#.#####.....#####.....#######
###.#####.###I###.#####.#######.#######.#.#.###.###.#.#########.#####.###########
#...#...#...#.###.###...#######.#...###.#.#..f..###...#######...#.....###########
#.###.#.###.#.###.###.#########.#.#.###.#.###################.###.###############
#.J...#.....#.........#########...#.....#.............H....o#.....###############
#################################################################################
'''.strip()

res = solve(maze)

print(res)
