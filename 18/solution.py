from collections import deque
from point import Point


class Maze():

    WALL = '#'
    EMPTY = '.'
    PLAYER = '@'

    def __init__(self, inp):
        rows = inp.split()
        self.board = {}
        self.num_of_keys = 0

        for y in range(len(rows)):
            for x in range(len(rows[0])):
                value = rows[y][x]
                point = Point(x, y)

                if value == Maze.PLAYER:
                    self.player = point
                    self.board[point] = Maze.EMPTY
                    continue

                if value.islower():
                    self.num_of_keys += 1

                self.board[point] = value

    def get_neighbours(self, p):
        potential = [
            Point(p.x, p.y + 1),
            Point(p.x, p.y - 1),
            Point(p.x - 1, p.y),
            Point(p.x + 1, p.y)
        ]

        return list(filter(lambda x: self.board[x] != Maze.WALL, potential))

    def get_value(self, p):
        return self.board[p]


def simplify(maze):
    deltas = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    height = len(maze)
    width = len(maze[0])

    for y in range(1, height-1):
        row = maze[y]
        for x in range(1, width-1):
            neighbours = [(x + dx, y + dy) for dx, dy in deltas]
            num_hash = len(list(filter(
                lambda t: maze[t[1]][t[0]] == '#',
                neighbours
            )))

            if num_hash >= 3 and not row[x].islower():
                row[x] = '#'
                continue


def analize(inp):
    '''
    used to get nicer maze
    '''
    maze = [list(row) for row in inp.split()]

    for i in range(300):
        print(i)
        simplify(maze)

    for row in maze:
        print(''.join(row))


def add_if_key(keys_set, key):
    if key.islower():
        return keys_set | frozenset([key])

    return keys_set


def legal_door(keys_set, value):
    if not value.isupper():
        return True

    return value.lower() in keys_set


def solve(inp):
    maze = Maze(inp)

    visited = set()
    to_visit = deque([(maze.player, frozenset()), 'LVL_UP'])
    dist = 0

    while len(to_visit) > 1:
        current = to_visit.popleft()

        if current == 'LVL_UP':
            dist += 1
            to_visit.append('LVL_UP')
            continue

        if current in visited:
            continue

        visited.add(current)

        (point, keys_set) = current
        value = maze.get_value(point)

        if len(keys_set) == maze.num_of_keys:
            return dist

        neighbours = maze.get_neighbours(point)
        with_keys = [(n, add_if_key(keys_set, maze.get_value(n))) for n in neighbours]
        only_open_dors = [tup for tup in with_keys if legal_door(tup[1], value)]

        to_visit += deque([tup for tup in only_open_dors if tup not in visited])

    raise Exception('not found')


maze = '''
#################################################################################
###########.........#####################.....................#...###c#.......###
###########.#######.#####################.#######.###########.#.#.###.#.#####.###
#######e..#...###...#####################..b#####.###########...#.....#.#.T..r###
#######.#.###.###.#########################.#####.#####################.#.#######
#######.#...#.###.#########################.#####.###...#######...#####.#.......#
#######.###.#.###.#########################.#####.###.#.#######.#.#####.#######.#
#######...#...#...#########################.#####.....#.###.....#.#####.###.....#
#########.#####.###########################.###########.###O#####.#####.###.#####
#########...###.....#####################...#x#########.###...#z#.....#.###.#####
###########.#######.#####################.###.#########.#####.#.#####.#.###.#####
###########.#######.#####################...#.#########.###.....###...#...#.....#
###########.#######.#######################.#.#########.###.#######.#####.#####.#
###########...#####.#######################.#...#######.###.#######.......#....q#
#############.#####.#######################.###.#######.###.###############.#####
#############.#####...#####..h#############.....#######...#.###############.#####
#############.#######.#####.#############################.#.###############.#####
#############.#######.###...#############################...#########.......#####
#############.#######.###F###########################################.###########
###########...#######...#.#############s#############################.###########
###########.###########.#.#############.#############################.###########
###d#####...###########...#############.#############################.###########
###.#####.#############################.#############################.###########
###.....#...###########################.###########################...###########
#######.###.###########################.###########################.#############
#######.###...#...#.......###.........#.#.....#####################...###########
#######.#####.#.#.#.#####.###.#######.#.#.###.#######################.###########
#####...#####.#.#...#.....#...###.....#.#.###...#################.....###########
#####.#######.#.#####.#####.#####.#####.#.#####.#################.#.#############
#####.#######.#...###.#...#.....#.###...#.....#.#################.#j#.....###.W.#
#####.#######.###.###.#.#.#####.#.###.#.#####.#.#################.###.###.###.#.#
#...#.#######.#...###.#.#.......#.....#.###...#.......###########...#.###...#.#.#
#.#.#.#######.#.#####.#.###############.###.#########.#############.#.#####.#.#.#
#.#...#...###.#w..#...#...#############.###.#####...#...#######...#...#.V.#...#.#
#.#####.#.###.###.#.#####.#############.###.#####.#.###.#######.#M#####.#.#####.#
#.....#.#...#.....#.#####.#########.....###.......#...#...#####.#.......#.......#
#####.#.###.#######.#####.#########.#################.###.#####.#################
#.....#.###.......#.#####.#########.....#...#.....###.###.#####.....#############
#.#####.#########.#.#####.#############.#.#.#.###.###.###.#########.#############
#............v###.........#############...#...###.....###...........#############
#######################################.@.#######################################
###.....#############.......#.........#.........#####...#################...#####
###.###.#############.#####.#.###.###.#.#######.#####.#.#################.#.#####
###.###.....#########.#####...###.###...#######......a#.......#########...#.#####
###.#######.#########.###########.###########################.#########.###.#####
###..n....#.#########.###########.....###########...###...###...#######...#.#####
#########.#.#########.###############.###########.#.###.#.#####.#########P#.#####
#######...#...#u..#...###############.#########...#.....#.#####.....#...#.#.#####
#######.#####.#.#.#.#################.#########.#########.#########.#.#U#.#.#####
#######p..###...#...#################.#########.###...#...#####...#...#.#.#...###
#########.###########################.#########.###.#.#.#######.#.#####.#.###.###
#...###...#################..k..#...#...#######.#...#.#.#####...#...#...#...#.###
#.#.###.###################.###.#.#.###.#######.#.###C#Z#####.#####.#.#####.#.###
#.#.....###################.#...#.#...#.#######.#.#...#...###...###.#...###.#.###
#.#########################.#.###.###.#.#######.#.#.#####.#####.###.###.###.#.###
#m#####...........#######...#...#...#.#.#######.#.#.#.....#####.#...#..g#.N.#...#
#######.#########.#######.#####.###.#.#.#######.#B#.#.#########.#.###.###.#####.#
###.....#######...#######.#####.#...#...#######...#.#.......#...#...#...#.#i###.#
###.###########.#########.#####.#.#################.#######.#.#####.###.#.#.###.#
#...#.......#...#####y....#...#.#.#.....#########...#######...#####.#...#.#.###.#
#.###.#####.#.#############.#.#.#.#.###.#########.#################.#.###.#.###.#
#...#.###...#.#############.#...#...###.#########...#############...#.....#.###.#
###.#.###.###.#############.###########.###########X#############.#########.###.#
#...#.###...#.....#########...#####.....###########.###########...#######.......#
#Q###.#####.#####.###########.#####.###############.###########.#########.#######
#.....#####.#####.........#...###...###############...#########.#.......#.......#
###########.#############.#.#####.###################.#########.#D#####.#######.#
###...#####.###.....#####...###...###################..l#####...#.#####.......#.#
###.#.#####.###.###.###########.#############################.###.###########.#.#
#...#...###.....#...###########.........#####################.###...#########...#
#.#####.#########.#####################.#####################.#####.#############
#.###t#.#######...#####################.#####################.###...###...#######
#.###.#.#######.#######################.#####################.###.#####.#.#######
#...#...###...#.#######.......#######...#############.........###.......#.#######
###.#######.#.#.#######.#####.#######.###############.#####.#############.#######
###.#####...#.#...#####.#####...#####...#...###.....#.#####.....#####.....#######
###.#####.###I###.#####.#######.#######.#.#.###.###.#.#########.#####.###########
#...#...#...#.###.###...#######.#...###.#.#..f..###...#######...#.....###########
#.###.#.###.#.###.###.#########.#.#.###.#.###################.###.###############
#.J...#.....#.........#########...#.....#.............H....o#.....###############
#################################################################################
'''.strip()

res = solve(maze)

print(res)

# analize(maze)
