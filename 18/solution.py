from collections import deque
from point import Point


class Maze():

    WALL = '#'
    EMPTY = '.'
    PLAYER = '@'

    def __init__(self, inp):
        rows = inp.split()
        self.board = {}
        self.knd = {}  # keys and doors

        for y in range(len(rows)):
            for x in range(len(rows[0])):
                value = rows[y][x]
                point = Point(x, y)

                if value == Maze.PLAYER:
                    self.player = point
                    self.board[point] = Maze.WALL
                    continue
                elif value.isalpha():
                    self.knd[value] = point

                self.board[point] = value

    def get_neighbours(self, p):
        potential = [
            Point(p.x, p.y + 1),
            Point(p.x, p.y - 1),
            Point(p.x - 1, p.y),
            Point(p.x + 1, p.y)
        ]

        return list(filter(lambda x: self.board[x] != Maze.WALL, potential))

    def get_propositions(self, p):
        visited = set([p])
        to_visit = deque(self.get_neighbours(p) + ['LVL_UP'])
        dist = 1

        res = []

        while len(to_visit) > 1:
            # print(len(to_visit))
            current = to_visit.popleft()
            visited.add(current)

            if current == 'LVL_UP':
                dist += 1
                to_visit.append('LVL_UP')
                continue

            value = self.board[current]

            if value in self.knd:
                res.append((value, dist))
                continue

            to_visit += deque([n for n in self.get_neighbours(current) if n not in visited])

        return list(set(res))


class Graph:

    def __init__(self, maze):
        self.edges = {}

        for item, point in maze.knd.items():
            self.edges[item] = maze.get_propositions(point)

    def show_edges(self):
        for k, v in self.edges.items():
            print(f"{k} -> {v}")

    def num_combinations(self):
        res = 1
        for v in self.edges.values():
            res *= len(v)
        return res

    def get_blockings(self):
        # def aux()
        pass



    def solve_for(self):
        pass


def solve(inp):
    maze = Maze(inp)
    propositions = maze.get_propositions(maze.player)
    starts = [x for x in propositions if x[0].islower()]

    knd_graph = Graph(maze)

    blockings = knd_graph.get_blockings()

    print(blockings)

    # knd_graph.show_edges()

    # results = []

    # for key, player_dist in starts:
    #     results.append(knd_graph.solve_for(key) + player_dist)

    # print(propositions)

    # return min(results)


def simplify(maze):
    deltas = [(0, 1), (0, -1), (1, 0), (-1, 0)]
    height = len(maze)
    width = len(maze[0])

    for y in range(1, height-1):
        row = maze[y]
        for x in range(1, width-1):
            neighbours = [(x + dx, y + dy) for dx, dy in deltas]
            num_hash = len(list(filter(
                lambda t: maze[t[1]][t[0]] == '#',
                neighbours
            )))

            if num_hash >= 3 and not row[x].islower():
                row[x] = '#'
                continue


def analize(inp):
    maze = [list(row) for row in inp.split()]

    for i in range(300):
        print(i)
        simplify(maze)

    for row in maze:
        print(''.join(row))


maze = '''
#################################################################################
###########.........#####################.....................#...###c#.......###
###########.#######.#####################.#######.###########.#.#.###.#.#####.###
#######e..#...###...#####################..b#####.###########...#.....#.#.T..r###
#######.#.###.###.#########################.#####.#####################.#.#######
#######.#...#.###.#########################.#####.###...#######...#####.#.......#
#######.###.#.###.#########################.#####.###.#.#######.#.#####.#######.#
#######...#...#...#########################.#####.....#.###.....#.#####.###.....#
#########.#####.###########################.###########.###O#####.#####.###.#####
#########...###.....#####################...#x#########.###...#z#.....#.###.#####
###########.#######.#####################.###.#########.#####.#.#####.#.###.#####
###########.#######.#####################...#.#########.###.....###...#...#.....#
###########.#######.#######################.#.#########.###.#######.#####.#####.#
###########...#####.#######################.#...#######.###.#######.......#....q#
#############.#####.#######################.###.#######.###.###############.#####
#############.#####...#####..h#############.....#######...#.###############.#####
#############.#######.#####.#############################.#.###############.#####
#############.#######.###...#############################...#########.......#####
#############.#######.###F###########################################.###########
###########...#######...#.#############s#############################.###########
###########.###########.#.#############.#############################.###########
###d#####...###########...#############.#############################.###########
###.#####.#############################.#############################.###########
###.....#...###########################.###########################...###########
#######.###.###########################.###########################.#############
#######.###...#...#.......###.........#.#.....#####################...###########
#######.#####.#.#.#.#####.###.#######.#.#.###.#######################.###########
#####...#####.#.#...#.....#...###.....#.#.###...#################.....###########
#####.#######.#.#####.#####.#####.#####.#.#####.#################.#.#############
#####.#######.#...###.#...#.....#.###...#.....#.#################.#j#.....###.W.#
#####.#######.###.###.#.#.#####.#.###.#.#####.#.#################.###.###.###.#.#
#...#.#######.#...###.#.#.......#.....#.###...#.......###########...#.###...#.#.#
#.#.#.#######.#.#####.#.###############.###.#########.#############.#.#####.#.#.#
#.#...#...###.#w..#...#...#############.###.#####...#...#######...#...#.V.#...#.#
#.#####.#.###.###.#.#####.#############.###.#####.#.###.#######.#M#####.#.#####.#
#.....#.#...#.....#.#####.#########.....###.......#...#...#####.#.......#.......#
#####.#.###.#######.#####.#########.#################.###.#####.#################
#.....#.###.......#.#####.#########.....#...#.....###.###.#####.....#############
#.#####.#########.#.#####.#############.#.#.#.###.###.###.#########.#############
#............v###.........#############...#...###.....###...........#############
#######################################.@.#######################################
###.....#############.......#.........#.........#####...#################...#####
###.###.#############.#####.#.###.###.#.#######.#####.#.#################.#.#####
###.###.....#########.#####...###.###...#######......a#.......#########...#.#####
###.#######.#########.###########.###########################.#########.###.#####
###..n....#.#########.###########.....###########...###...###...#######...#.#####
#########.#.#########.###############.###########.#.###.#.#####.#########P#.#####
#######...#...#u..#...###############.#########...#.....#.#####.....#...#.#.#####
#######.#####.#.#.#.#################.#########.#########.#########.#.#U#.#.#####
#######p..###...#...#################.#########.###...#...#####...#...#.#.#...###
#########.###########################.#########.###.#.#.#######.#.#####.#.###.###
#...###...#################..k..#...#...#######.#...#.#.#####...#...#...#...#.###
#.#.###.###################.###.#.#.###.#######.#.###C#Z#####.#####.#.#####.#.###
#.#.....###################.#...#.#...#.#######.#.#...#...###...###.#...###.#.###
#.#########################.#.###.###.#.#######.#.#.#####.#####.###.###.###.#.###
#m#####...........#######...#...#...#.#.#######.#.#.#.....#####.#...#..g#.N.#...#
#######.#########.#######.#####.###.#.#.#######.#B#.#.#########.#.###.###.#####.#
###.....#######...#######.#####.#...#...#######...#.#.......#...#...#...#.#i###.#
###.###########.#########.#####.#.#################.#######.#.#####.###.#.#.###.#
#...#.......#...#####y....#...#.#.#.....#########...#######...#####.#...#.#.###.#
#.###.#####.#.#############.#.#.#.#.###.#########.#################.#.###.#.###.#
#...#.###...#.#############.#...#...###.#########...#############...#.....#.###.#
###.#.###.###.#############.###########.###########X#############.#########.###.#
#...#.###...#.....#########...#####.....###########.###########...#######.......#
#Q###.#####.#####.###########.#####.###############.###########.#########.#######
#.....#####.#####.........#...###...###############...#########.#.......#.......#
###########.#############.#.#####.###################.#########.#D#####.#######.#
###...#####.###.....#####...###...###################..l#####...#.#####.......#.#
###.#.#####.###.###.###########.#############################.###.###########.#.#
#...#...###.....#...###########.........#####################.###...#########...#
#.#####.#########.#####################.#####################.#####.#############
#.###t#.#######...#####################.#####################.###...###...#######
#.###.#.#######.#######################.#####################.###.#####.#.#######
#...#...###...#.#######.......#######...#############.........###.......#.#######
###.#######.#.#.#######.#####.#######.###############.#####.#############.#######
###.#####...#.#...#####.#####...#####...#...###.....#.#####.....#####.....#######
###.#####.###I###.#####.#######.#######.#.#.###.###.#.#########.#####.###########
#...#...#...#.###.###...#######.#...###.#.#..f..###...#######...#.....###########
#.###.#.###.#.###.###.#########.#.#.###.#.###################.###.###############
#.J...#.....#.........#########...#.....#.............H....o#.....###############
#################################################################################
'''.strip()

res = solve(maze)

print(res)

# analize(maze)
